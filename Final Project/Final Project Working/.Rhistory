options(scipen = 999)
mydata <- read.csv("Final_Project_FlixGem.csv")
mydata <- mydata %>% select(Title, Languages, Series.or.Movie, Hidden.Gem.Score, Runtime, Director, IMDb.Score, Rotten.Tomatoes.Score,
Metacritic.Score, Release.Date, Summary)
mydata <- mydata %>% filter(Series.or.Movie == 'Movie')
mydata <- na.omit(mydata)
testdata <- mydata %>% mutate(FirstLanguage = sub(",.*", "", mydata$Languages))
testdata <- testdata %>% mutate(Number_Of_Languages = (str_count(mydata$Languages, ',') + 1))
testdata <- testdata %>% mutate(Num_Languages = as.character(testdata$Number_Of_Languages))
view(testdata)
testdata <- testdata %>% mutate(Release_Year = sub("-.*", "", testdata$Release.Date))
testdata <- testdata %>% mutate(Release_Year = as.numeric(testdata$Release_Year))
testdata <- testdata %>% mutate(Release_Year_Range = cut(Release_Year, c(1920, 1945, 1970, 1995, 2021)))
testdata <- testdata %>% select(Title:FirstLanguage, Num_Languages, Release_Year, Release_Year_Range)
head(testdata)
testData <- testData %>% mutate(ReleaseYear_Range = case_when(Release_Year_Range == (1.92e+03,1.94e+03] ~ "1920-1945",
Release_Year_Range == (1.94e+03,1.97e+03] ~ "1945-1970",
Release_Year_Range == (1.97e+03,2e+03] ~ "1970-1995",
Release_Year_Range == (2e+03,2.02e+03] ~ "1995-2020"))
ReleaseSummaries <- ReleaseSummaries %>% kable()
ReleaseSummaries
testData <- testData %>% mutate(ReleaseYear_Range = case_when(Release_Year_Range == "(1.92e+03,1.94e+03]" ~ "1920-1945",
Release_Year_Range == "(1.94e+03,1.97e+03]" ~ "1945-1970",
Release_Year_Range == "(1.97e+03,2e+03]" ~ "1970-1995",
Release_Year_Range == "(2e+03,2.02e+03]" ~ "1995-2020"))
testdata <- testdata %>% mutate(ReleaseYear_Range = case_when(Release_Year_Range == "(1.92e+03,1.94e+03]" ~ "1920-1945",
Release_Year_Range == "(1.94e+03,1.97e+03]" ~ "1945-1970",
Release_Year_Range == "(1.97e+03,2e+03]" ~ "1970-1995",
Release_Year_Range == "(2e+03,2.02e+03]" ~ "1995-2020"))
view(testdata)
testdata <- testdata %>% mutate(Release_Year = sub("-.*", "", testdata$Release.Date))
testdata <- testdata %>% mutate(Release_Year = as.numeric(testdata$Release_Year))
testdata <- testdata %>% mutate(Release_Year_Range = cut(Release_Year, c(1920, 1945, 1970, 1995, 2021)))
testdata <- testdata %>% mutate(ReleaseYear_Range = case_when(Release_Year_Range == "(1.92e+03,1.94e+03]" ~ "1920-1945",
Release_Year_Range == "(1.94e+03,1.97e+03]" ~ "1945-1970",
Release_Year_Range == "(1.97e+03,2e+03]" ~ "1970-1995",
Release_Year_Range == "(2e+03,2.02e+03]" ~ "1995-2020"))
testdata <- testdata %>% select(Title:FirstLanguage, Num_Languages, Release_Year, ReleaseYear_Range)
view(testdata)
ReleaseSummaries <- testdata %>% group_by(ReleaseYear_Range, Runtime) %>% summarise(MeanScore = mean(Hidden.Gem.Score))
ReleaseSummaries <- ReleaseSummaries %>% kable()
ReleaseSummaries
summary(model)
library(rpart)
set.seed(123)
train.index = sample(1:dim(data)[1],dim(data)[1]*0.7)
train=data[train.index,]
train.index = sample(1:dim(data)[1],dim(data)[1]*0.7)
library(here)
library(tidyverse)
library(ggpubr)
library(knitr)
library(rpart)
library(rpart.tool)
library(rpart.plot)
data <- read.csv("Final_Project_FlixGem.csv")
data <- data %>% select(Title, Languages, Series.or.Movie, Hidden.Gem.Score, Runtime, Director, IMDb.Score, Rotten.Tomatoes.Score,
Metacritic.Score, Release.Date, Summary)
data <- data %>% filter(Series.or.Movie == 'Movie')
data <- na.omit(data)
view(data)
set.seed(123)
train.index=sample(1:dim(data)[1],dim(data)[1]*0.7)
train=data[train.index,]
valid=data[-train.index,]
model <- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score, data, parms=list(split=c("information","gini")),cp = 0.01, minsplit=20, minbucket=7, maxdepth=30)
model
view(model)
model <- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score, data, method = "anova",
parms=list(split=c("information","gini")),cp = 0.01, minsplit=20, minbucket=7, maxdepth=30)
summary(model)
default.model <- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score, data = train)
default.model
rpart.plot(model)
default.model <- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score, data = train)
rpart.plot(default.model)
one.rule.model<- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score, data = train, maxdepth =1)
rpart.plot(one.rule.model, main="Single Rule Model")
cost.driven.model <- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score,data=train,parms=list(loss=matrix(c(0,1,5,0),byrow=TRUE,nrow=2)))
rpart.plot(cost.driven.model)
rpart.plot(model)
default.model <- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score, data = train, method = "anova")
rpart.plot(default.model)
info.model <- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score, data = train, parms=list(split="information"))
rpart.plot(info.model)
one.rule.model<- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score, data = train, maxdepth =1)
rpart.plot(one.rule.model, main="Single Rule Model")
default.model <- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score, data = train, method = "anova")
rpart.plot(default.model)
info.model <- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score, data = train, parms=list(split="information"))
rpart.plot(info.model)
one.rule.model<- rpart(Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score, data = train, maxdepth =1)
rpart.plot(one.rule.model, main="Single Rule Model")
train.index = sample(1:dim(data)[1],dim(data)[1]*0.7)
train.index
nrow(data)
data <- read.csv("Final_Project_FlixGem.csv")
nrow(data)
data <- data %>% select(Title, Languages, Series.or.Movie, Hidden.Gem.Score, Runtime, Director, IMDb.Score, Rotten.Tomatoes.Score,
Metacritic.Score, Release.Date, Summary)
nrow(data)
data <- data %>% filter(Series.or.Movie == 'Movie')
nrow(data)
data <- na.omit(data)
nrow(data)
hyper_grid <- expand.grid(
minsplit = seq(5, 20, 1),
maxdepth = seq(8, 15, 1)
)
head(hyper_grid)
models <- list()
for (i in 1:nrow(hyper_grid)) {
# get minsplit, maxdepth values at row i
minsplit <- hyper_grid$minsplit[i]
maxdepth <- hyper_grid$maxdepth[i]
# train a model and store in the list
models[[i]] <- rpart(
formula = Sale_Price ~ .,
data    = ames_train,
method  = "anova",
control = list(minsplit = minsplit, maxdepth = maxdepth)
)
}
mydata <- read.csv("Final_Project_FlixGem.csv")
mydata <- mydata %>% filter(Series.or.Movie == 'Movie')
mydata <- mydata %>% select(Title, Languages, Series.or.Movie, Hidden.Gem.Score, Runtime, Director, IMDb.Score, Rotten.Tomatoes.Score,
Metacritic.Score, Release.Date, Summary)
mydata <- mydata %>% filter(Series.or.Movie == 'Movie')
mydata <- na.omit(mydata)
hyper_grid <- expand.grid(
minsplit = seq(5, 20, 1),
maxdepth = seq(8, 15, 1)
)
models <- list()
for (i in 1:nrow(hyper_grid)) {
# get minsplit, maxdepth values at row i
minsplit <- hyper_grid$minsplit[i]
maxdepth <- hyper_grid$maxdepth[i]
# train a model and store in the list
models[[i]] <- rpart(
formula = Sale_Price ~ .,
data    = mydata,
method  = "anova",
control = list(minsplit = minsplit, maxdepth = maxdepth)
)
}
for (i in 1:nrow(hyper_grid)) {
# get minsplit, maxdepth values at row i
minsplit <- hyper_grid$minsplit[i]
maxdepth <- hyper_grid$maxdepth[i]
# train a model and store in the list
models[[i]] <- rpart(
formula = Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score,
data    = mydata,
method  = "anova",
control = list(minsplit = minsplit, maxdepth = maxdepth)
)
}
for (i in 1:nrow(hyper_grid)) {
# get minsplit, maxdepth values at row i
minsplit <- hyper_grid$minsplit[i]
maxdepth <- hyper_grid$maxdepth[i]
# train a model and store in the list
models[[i]] <- rpart(
formula = Hidden.Gem.Score ~ Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data    = mydata,
method  = "anova",
control = list(minsplit = minsplit, maxdepth = maxdepth)
)
}
get_cp <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
cp <- x$cptable[min, "CP"]
}
# function to get minimum error
get_min_error <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
xerror <- x$cptable[min, "xerror"]
}
hyper_grid %>%
mutate(
cp    = purrr::map_dbl(models, get_cp),
error = purrr::map_dbl(models, get_min_error)
) %>%
arrange(error) %>%
top_n(-5, wt = error)
model <- rpart(formula = Hidden.Gem.Score ~ Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
parms=list(split=c("information","gini")), cp = 0.01, minsplit=6, minbucket=7, maxdepth=12)
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score ~ Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
parms=list(split=c("information","gini")), cp = 0.01, minsplit= 90, minbucket= , maxdepth=12)
model <- rpart(formula = Hidden.Gem.Score ~ Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
parms=list(split=c("information","gini")), cp = 0.01, minsplit= 90, minbucket= , maxdepth=12)
model <- rpart(formula = Hidden.Gem.Score ~ Languages + Runtime + IMDb.Score +Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
parms=list(split=c("information","gini")), cp = 0.01, minsplit= 90, minbucket= , maxdepth=12)
model <- rpart(formula = Hidden.Gem.Score~Languages+Runtime+IMDb.Score+Rotten.Tomatoes.Score+Metacritic.Score,
data = mydata,
parms=list(split=c("information","gini")), cp = 0.01, minsplit= 90, minbucket= , maxdepth=12)
parms=list(cp = 0.01, minsplit= 19, maxdepth=12)
control = list(minsplit = 19, maxdepth = 12, cp = 0.01)
rpart.plot(model)
fancyRpartPlot(model, caption = NULL)
library(rattle)
install.packages("rattle")
library(rattle)
library(RColorBrewer)
control = list(minsplit = 19, maxdepth = 12, cp = 0.01)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 19, maxdepth = 12, cp = 0.01))
fancyRpartPlot(model, caption = NULL)
fancyRpartPlot(model, caption = NULL) + ggrepel::geom_label_repel() + ggrepel::geom_text_repel()
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 90, maxdepth = 12, cp = 0.01))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 1000, maxdepth = 12, cp = 0.01))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 500, maxdepth = 12, cp = 0.01))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 600, maxdepth = 12, cp = 0.01))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 700, maxdepth = 12, cp = 0.01))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 800, maxdepth = 12, cp = 0.01))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 800, maxdepth = 12, cp = 0.1))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 6, maxdepth = 12, cp = 0.1))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 6, maxdepth = 12, cp = 0.05))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 6, maxdepth = 12, cp = 0.02))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 6, maxdepth = 12, cp = 0.01))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 6, maxdepth = 12, cp = 0.015))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 6, maxdepth = 12, cp = 0.011))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 6, maxdepth = 12, cp = 0.012))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 6, maxdepth = 12, cp = 0.013))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 6, maxdepth = 12, cp = 0.014))
rpart.plot(model)
model <- rpart(formula = Hidden.Gem.Score~Languages + Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score,
data = mydata,
control = list(minsplit = 6, maxdepth = 12, cp = 0.015))
rpart.plot(model)
rpart.plot(model, cex = 3)
rpart.plot(model, cex = 0.1)
testdata <- mydata %>% mutate(FirstLanguage = sub(",.*", "", mydata$Languages))
view(testdata)
models <- list()
for (i in 1:nrow(hyper_grid)) {
# get minsplit, maxdepth values at row i
minsplit <- hyper_grid$minsplit[i]
maxdepth <- hyper_grid$maxdepth[i]
# train a model and store in the list
models[[i]] <- rpart(
formula = Hidden.Gem.Score ~ Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score + FirstLanguage,
data    = testdata,
method  = "anova",
control = list(minsplit = minsplit, maxdepth = maxdepth)
)
}
get_cp <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
cp <- x$cptable[min, "CP"]
}
# function to get minimum error
get_min_error <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
xerror <- x$cptable[min, "xerror"]
}
hyper_grid %>%
mutate(
cp    = purrr::map_dbl(models, get_cp),
error = purrr::map_dbl(models, get_min_error)
) %>%
arrange(error) %>%
top_n(-5, wt = error)
model <- rpart(formula = Hidden.Gem.Score ~ Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score + FirstLanguage,
data = testdata,
control = list(minsplit = 6, maxdepth = 12, cp = 0.015))
rpart.plot(model, cex = 0.1)
model <- rpart(formula = Hidden.Gem.Score ~ Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score + FirstLanguage,
data = testdata,
control = list(minsplit = 9, maxdepth = 9, cp = 0.01))
rpart.plot(model, cex = 0.1)
model <- rpart(formula = Hidden.Gem.Score ~ Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score + FirstLanguage,
data = testdata,
method = "anova",
control = list(minsplit = 9, maxdepth = 9, cp = 0.01))
rpart.plot(model, cex = 0.1)
rpart.plot(model, cex = 0.15)
models <- list()
for (i in 1:nrow(hyper_grid)) {
# get minsplit, maxdepth values at row i
minsplit <- hyper_grid$minsplit[i]
maxdepth <- hyper_grid$maxdepth[i]
# train a model and store in the list
models[[i]] <- rpart(
formula = Hidden.Gem.Score ~ Runtime,
data    = testdata,
method  = "anova",
control = list(minsplit = minsplit, maxdepth = maxdepth)
)
}
get_cp <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
cp <- x$cptable[min, "CP"]
}
# function to get minimum error
get_min_error <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
xerror <- x$cptable[min, "xerror"]
}
hyper_grid %>%
mutate(
cp    = purrr::map_dbl(models, get_cp),
error = purrr::map_dbl(models, get_min_error)
) %>%
arrange(error) %>%
top_n(-5, wt = error)
model1 <- rpart(formula = Hidden.Gem.Score ~ Runtime,
data = testdata,
method = "anova",
control = list(minsplit = 5, maxdepth = 8, cp = 0.00098))
rpart.plot(model, cex = 0.15)
model1 <- rpart(formula = Hidden.Gem.Score ~ Runtime,
data = testdata,
method = "anova",
control = list(minsplit = 5, maxdepth = 8, cp = 0.00098))
rpart.plot(model, cex = 0.15)
model1 <- rpart(formula = Hidden.Gem.Score ~ Runtime,
data = testdata,
method = "anova",
control = list(minsplit = 5, maxdepth = 8, cp = 0.00098))
rpart.plot(model, cex = 0.15)
mydata <- read.csv("Final_Project_FlixGem.csv")
mydata <- mydata %>% select(Title, Languages, Series.or.Movie, Hidden.Gem.Score, Runtime, Director, IMDb.Score, Rotten.Tomatoes.Score,
Metacritic.Score, Release.Date, Summary)
mydata <- mydata %>% filter(Series.or.Movie == 'Movie')
mydata <- na.omit(mydata)
testdata <- mydata %>% mutate(FirstLanguage = sub(",.*", "", mydata$Languages))
nrow(mydata)
hyper_grid <- expand.grid(
minsplit = seq(5, 20, 1),
maxdepth = seq(8, 15, 1)
)
models <- list()
for (i in 1:nrow(hyper_grid)) {
# get minsplit, maxdepth values at row i
minsplit <- hyper_grid$minsplit[i]
maxdepth <- hyper_grid$maxdepth[i]
# train a model and store in the list
models[[i]] <- rpart(
formula = Hidden.Gem.Score ~ Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score + FirstLanguage,
data    = testdata,
method  = "anova",
control = list(minsplit = minsplit, maxdepth = maxdepth)
)
}
get_cp <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
cp <- x$cptable[min, "CP"]
}
# function to get minimum error
get_min_error <- function(x) {
min    <- which.min(x$cptable[, "xerror"])
xerror <- x$cptable[min, "xerror"]
}
hyper_grid %>%
mutate(
cp    = purrr::map_dbl(models, get_cp),
error = purrr::map_dbl(models, get_min_error)
) %>% arrange(error) %>%
top_n(-5, wt = error)
set.seed(123)
train.index = sample(1:dim(mydata)[1],dim(mydata)[1]*0.7)
train = mydata[train.index,]
valid = mydata[-train.index,]
model <- rpart(formula = Hidden.Gem.Score ~ Runtime + IMDb.Score + Rotten.Tomatoes.Score + Metacritic.Score + FirstLanguage,
data = testdata,
method = "anova",
control = list(minsplit = 8, maxdepth = 13, cp = 0.01))
rpart.plot(model, cex = 0.12)
knitr::stitch('Task2.r')
knitr::stitch('Task2.r')
knitr::stitch('Task2.r')
mydata <- read.csv("Final_Project_FlixGem.csv")
mydata <- mydata %>% select(Title, Languages, Series.or.Movie, Hidden.Gem.Score, Runtime, Director, IMDb.Score, Rotten.Tomatoes.Score,
Metacritic.Score, Release.Date, Summary)
mydata <- mydata %>% filter(Series.or.Movie == 'Movie')
mydata <- na.omit(mydata)
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
cache = FALSE,
fig.align = "center"
)
netflix = mydata[complete.cases(netflix),]
mydata = mydata[complete.cases(mydata),]
mydata$Director= as.factor(mydata$Director)
mydata$Hidden.Gem.Score= round(mydata$Hidden.Gem.Score)
summary(mydata[,c(6,9)])
mydata <- read.csv("Final_Project_FlixGem.csv")
view(mydata)
mydata = mydata[complete.cases(mydata),]
mydata$Director= as.factor(mydata$Director)
mydata$Hidden.Gem.Score= round(mydata$Hidden.Gem.Score)
summary(mydata[,c(6,9)])
mydata <- mydata %>% select(Title, Languages, Series.or.Movie, Hidden.Gem.Score, Runtime, Director, IMDb.Score, Rotten.Tomatoes.Score,
Metacritic.Score, Release.Date, Summary)
mydata <- mydata %>% filter(Series.or.Movie == 'Movie')
mydata <- na.omit(mydata)
mydata = mydata[complete.cases(mydata),]
mydata$Director= as.factor(mydata$Director)
mydata$Hidden.Gem.Score= round(mydata$Hidden.Gem.Score)
view(mydata)
summary(mydata[, c(4,6)])
h_index <- function(movie_scores){
if (max(movie_scores) ==0) {
return(0)
}
movie_scores= movie_scores[order(movie_scores, decreasing = TRUE)]
tail(which(movie_scores >= seq_along(movie_scores)), 1)
}
H_index_df = data.frame(Directors= unique(mydata$Director), h_index = NA)
for(i in 1:nrow(H_index_df)){
H_index_df$h_index[i] = h_index(mydata$Hidden.Gem.Score[mydata$Director == H_index_df$Directors[i]])
}
H_index_df = H_index_df[order(H_index_df$h_index, decreasing = TRUE),]
head(H_index_df, 10)
H_index_df = H_index_df[order(H_index_df$h_index, decreasing = TRUE),] %>% kable()
head(H_index_df, 10)
if (max(movie_scores) ==0) {
return(0)
}
HG_H_index <- function(movie_scores){
if (max(movie_scores) ==0) {
return(0)
}
movie_scores= movie_scores[order(movie_scores, decreasing = TRUE)]
tail(which(movie_scores >= seq_along(movie_scores)), 1)
}
HG_H_index_df = data.frame(Directors= unique(mydata$Director), HG_H_index = NA)
for(i in 1:nrow(HG_H_index_df)){
HG_H_index_df$HG_H_index[i] = HG_H_index(mydata$Hidden.Gem.Score[mydata$Director == HG_H_index_df$Directors[i]])
}
HG_H_index_df = HG_H_index_df[order(HG_H_index_df$HG_H_index, decreasing = TRUE),] %>% kable()
head(HG_H_index_df, 10)
HG_H_index_df = HG_H_index_df[order(HG_H_index_df$HG_H_index, decreasing = TRUE),]
head(HG_H_index_df, 10)
HG_H_index_df <- HG_H_index_df[order(HG_H_index_df$HG_H_index, decreasing = TRUE),]
HG_H_index_df = HG_H_index_df[order(HG_H_index_df$HG_H_index, decreasing = TRUE),]
HG_H_index <- function(movie_scores){
if (max(movie_scores) ==0) {
return(0)
}
movie_scores= movie_scores[order(movie_scores, decreasing = TRUE)]
tail(which(movie_scores >= seq_along(movie_scores)), 1)
}
HG_H_index_df = data.frame(Directors= unique(mydata$Director), HG_H_index = NA)
for(i in 1:nrow(HG_H_index_df)){
HG_H_index_df$HG_H_index[i] = HG_H_index(mydata$Hidden.Gem.Score[mydata$Director == HG_H_index_df$Directors[i]])
}
HG_H_index_df = HG_H_index_df[order(HG_H_index_df$HG_H_index, decreasing = TRUE),]
head(HG_H_index_df, 10)
class(HG_H_index_df)
HG_H_index_df <- as.table(HG_H_index_df)
HG_H_index_df <- as.table(as.matrix(HG_H_index_df))
head(HG_H_index_df, 10)
class(HG_H_index_df)
